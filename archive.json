{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-07-06T01:51:12.724466+00:00",
  "repo": "njwatson32/oauth-error",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOOZiD3s62Gb0C",
      "title": "Test Issue",
      "url": "https://github.com/njwatson32/oauth-error/issues/1",
      "state": "OPEN",
      "author": "njwatson32",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-11T18:24:44Z",
      "updatedAt": "2025-05-11T18:24:44Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 2,
      "id": "I_kwDOOZiD3s6-eCcu",
      "title": "error_state feedback",
      "url": "https://github.com/njwatson32/oauth-error/issues/2",
      "state": "OPEN",
      "author": "yaron-zehavi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- error_state is not an OAuth request parameter, further elaboration is required to define it as such.\n- Token endpoint: Why use the client to store error_state and replay it into the new request?\n  - It might contain sensitive data\n  - Requires protection against manipulation\n  - Also the state in AS might have changed by the time a new request is placed\n  - Isn't it better that AS shall evaluate new requests based on the most updated state of user account, its permissions and the policies in place regarding client?\n- Resource server:\n  - error_state as JWT whose audience is the AS, requires a trust framework enabling AS can trust the RS\n  - Client should not process error_state so doesn't know what failed and whether it is recoverable, not the best \"client experience\"\n  - Initiating a new OAuth grant might also be rejected, bestowing upon the AS the role to explain to end-user what went wrong. That sounds like a good solution preserving user's privacy, for errors in the AS' domain. But what if the reason is NOT in AS' domain but known only to RS? for example temporal (requested service will be available later) or an access policy of RS not met, which AS knows nothing about\n  - We've (https://www.ietf.org/archive/id/draft-lombardo-oauth-step-up-authz-challenge-proto-02.html) also discussed the idea that RS shall indicate to client missing authorization data, such as scope or RAR authorization details, so that client makes a new modified OAuth request. But to this end, the audience of RS's response is the client\n  - Note: We've also contemplated the question of distinguishing recoverable and non-recoverable errors, or as we called it \"instructive\" (instructing client as to how to form the next OAuth request) and \"informative\" errors, and also decided to combine them in one response",
      "createdAt": "2025-07-02T11:16:20Z",
      "updatedAt": "2025-07-02T11:16:20Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": []
}